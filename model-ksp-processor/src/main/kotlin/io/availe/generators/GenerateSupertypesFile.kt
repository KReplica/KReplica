package io.availe.generators

import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.TypeSpec
import io.availe.builders.asClassName
import io.availe.builders.overwriteFile
import io.availe.models.DtoVariant
import io.availe.models.Model

internal fun generateSupertypesFile(
    models: List<Model>,
    codeGenerator: CodeGenerator,
    dependencies: Dependencies
) {
    val uniqueSupertypes = models.flatMap { it.supertypes }.distinctBy { it.fqn }

    if (uniqueSupertypes.isEmpty()) {
        return
    }

    val representativeSupertype = uniqueSupertypes.first()
    val packageName = representativeSupertype.fqn.substringBeforeLast('.')
    val fileName = "_KReplicaGeneratedSupertypes"

    val fileSpecBuilder = FileSpec.builder(packageName, fileName)
        .addFileComment("Generated by KReplica. Do not edit.")

    uniqueSupertypes.forEach { supertypeInfo ->
        val baseClassName = supertypeInfo.fqn.asClassName()

        DtoVariant.entries.forEach { variant ->
            val variantInterfaceName = baseClassName.simpleName + variant.suffix
            val variantInterfaceSpec = TypeSpec.interfaceBuilder(variantInterfaceName)
                .addModifiers(KModifier.PUBLIC, KModifier.SEALED)
                .addSuperinterface(baseClassName)
                .apply {
                    if (supertypeInfo.isSerializable) {
                        addAnnotation(ClassName("kotlinx.serialization", "Serializable"))
                    }
                }
                .build()
            fileSpecBuilder.addType(variantInterfaceSpec)
        }
    }

    overwriteFile(fileSpecBuilder.build(), codeGenerator, dependencies)
}